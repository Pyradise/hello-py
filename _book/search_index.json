[
["index.html", "Hello Py: Python 程式設計 1 關於 Pyradise 1.1 講師陣容", " Hello Py: Python 程式設計 Pyradise 1 關於 Pyradise Pyradise 是專注於 Python 教學的團隊，致力於分享學習經驗，推廣資料科學，人工智慧，讓更多人能參與到這波資訊與人工智慧的學習浪潮。 1.1 講師陣容 1.1.1 帽子哥 專注於技術，熱衷於教學的開發者，希望透過教學，傳遞出更多想法的帽子哥。 1.1.2 喵貓老師 資料科學與推廣教育的愛好者，閒暇時喜歡長跑與乒乓球；是 2017 iT邦幫忙鐵人賽 Big Data 組冠軍。 1.1.3 小安老師 前端工程師與設計師。 1.1.4 有勁老師 一個碼農，講師，與創業者。 "],
["colab.html", "2 Google Colab 2.1 Python 的開發環境 2.2 為什麼選擇 Google Colab？ 2.3 Google Colab 設定", " 2 Google Colab 2.1 Python 的開發環境 關於 Python 的開發環境有多種選擇，依據廣泛應用、網站開發或資料科學各種不同的應用場景，使用者有著極大差異的偏好。常見的 Python 開發環境有： 文字編輯器 + 終端機 Spyder PyCharm Anaconda 這門課的取向是快速入門，所以略過在本機（自己的電腦）上安裝開發環境，而是選擇 Google Colaboratory 作為開發環境。 2.2 為什麼選擇 Google Colab？ 任何人只要具備 Google 帳號與瀏覽器就可以開始撰寫 Python 程式；除此之外，它還具備即時互動的功能、預先安裝好的 Python 模組套件以及可以在文件中執行 pip 指令（Python 的套件管理模組），在使用上，就像是開啟一個 Google 文件一般簡單。 新增文件： 連結更多應用程式： 連結 Google Colaboratory： 2.3 Google Colab 設定 Runtime 設定為 Python 3: "],
["get-started.html", "3 快速上手 3.1 互動式介面 3.2 print 函數 3.3 求助 3.4 註解 3.5 使用 = 賦值 3.6 Python 3 的內建函數", " 3 快速上手 3.1 互動式介面 Google Colab 提供了一個互動式的介面，我們可以在 cell 裡面輸入合法的 Python 語法，讓我們來試試個簡單的指令： 8 + 7 Python 就好像計算機一樣地正確列出了 8 + 7 的結果。 3.2 print 函數 如果在一個 cell 裡面我們想要輸出多個結果，必須要使用 print() 函數，否則只會得到最後一行的輸出： print(8 + 7) ## 15 print(8 - 7) ## 1 3.3 求助 使用 help() 函數查詢官方文件，是一個內建的求助系統，在沒有網路或是想要快速查詢時可以善加利用。 help(print) 3.4 註解 使用 # 來寫程式的註解，這些說明會被 Python 給忽略掉，所以 # 號後面的內容將不會被執行，通常我們會對重要或者是需要解說的程式碼下註解。 # 印出 8 + 7 的運算結果 print(8 + 7) ## 15 3.5 使用 = 賦值 任何 Python 的程式如果產生結果，我們可能會想要記下這個結果，我們可以使用賦值記下這個物件。 ans = 8 + 7 print(ans) ## 15 print(ans + 6) ## 21 物件能夠儲存各式運算結果的值。但是命名可不能馬虎，要遵從： 以底線或英文字母開頭字符 以底線、英文字母和數字為後續字符 不可與保留字相同 大小寫有別（case sensitive） 3.6 Python 3 的內建函數 我們可以在 https://docs.python.org/3/library/functions.html 官方文件中查看有哪些內建函數。 "],
["section-4.html", "4 基本資料類型 4.1 整數與浮點數 4.2 文字 4.3 布林 4.4 邏輯運算符號 4.5 資料類型的轉換", " 4 基本資料類型 暸解可以運用的資料類型是學習一個程式語言的基本功（其他像是之後章節會涵蓋的資料容器，流程控制或者迭代語法也歸類於基本功），它的枯燥無味常讓初學者感到索然無味，但是它對未來應用的重要性絕對無庸置疑，我們用一張表格整理 Python 的基本資料類型： 基本資料類型 基本資料類型英文 範例 整數 int 87 浮點數 float 8.7 文字 str &quot;Hello Py&quot; 布林 bool True、False 4.1 整數與浮點數 簡單的應用就是將 Python 當作計算機對整數（int）與浮點數（float）進行數學運算，常用的運算符號有： 運算符號 作用 + 加 - 減 * 乘 / 除 ** 次方 % 回傳餘數 // 回傳商數 print(8 + 7) ## 15 print(8 - 7) ## 1 print(8 * 7) ## 56 print(8 / 7) ## 1 print(8 ** 2) ## 64 print(8 % 5) ## 3 print(8 // 5) ## 1 4.2 文字 我們可以使用單引號（'）或雙引號（&quot;）來建立文字（str），假如我們希望在文字中納入單引號或雙引號，可以搭配使用斜線（\\）進行跳脫。 luke = &quot;Luke Skywalker&quot; luke = &#39;Luke Skywalker&#39; oneal = &quot;Shaquille O&#39;neal&quot; oneal = &#39;Shaquille O\\&#39;neal&#39; 4.2.1 .format 方法 字串也能夠進行格式化，只要使用 format() 方法： oneal = &quot;Shaquille O&#39;neal&quot; &quot;{} is one of the greatest center in NBA history.&quot;.format(oneal) oneal = &quot;Shaquille O&#39;neal&quot; steve = &quot;Steve Nash&quot; &quot;{} is one of the greatest center in NBA history, while {} is one of the greatest point guard.&quot;.format(oneal, steve) 4.2.2 input 函數 使用 input() 函數可以獲取使用者的輸入，以文字型別存在。 lucky_number = input(&quot;請輸入你的幸運數字：&quot;) print(&quot;我的幸運數字是 {}.format(lucky_number)&quot;) 4.3 布林 當我們需要進行條件判斷的時候就需要仰賴布林（bool），布林只有 True 與 False 這兩個值。這裡值得注意的觀念是，Python 是對大小寫敏感（case-sensitive）的程式語言，我們輸入 True 會被成功識別為布林，但是 TRUE 則不會被識別成功喔！ print(True) print(TRUE) 除了直接輸入布林，我們也可以藉由判斷運算符號進行條件判斷得到布林的輸出，常用的判斷運算符號有： 判斷運算符號 作用 == 是否等於 != 是否不等於 &gt; 是否大於 &lt; 是否小於 &gt;= 是否大於等於 &lt;= 是否小於等於 4.4 邏輯運算符號 進行條件判斷的時候我們常常會需要連結多個條件，這時我們就可以使用邏輯運算符號來將條件連結起來，其中 and 也可以用 &amp; 符號代替、or 也可以用 | 符號代替： 邏輯運算符號 作用 and 判斷兩側的條件是否都為 True or 判斷兩側的條件是否至少有一側為 True not 將布林的 True 或 False 反轉 print(True and True) ## True print(True and False) ## False print(False and False) ## False print(&quot;---&quot;) ## --- print(True or True) ## True print(True or False) ## True print(False or False) ## False print(&quot;---&quot;) ## --- print(not True) ## False print(not False) ## True 4.5 資料類型的轉換 不同的資料類型並不是壁壘分明、井水不犯河水的關係，我們也能使用函數進行資料類型的轉換，Python 中轉換資料類型的函數名稱跟資料類型是相互對應的，比如使用 int() 函數可以將輸入的物件轉換成為整數類型： 轉換資料類型的函數 描述 int() 轉換資料類型為 int float() 轉換資料類型為 float bool() 轉換資料類型為 bool str() 轉換資料類型為 str print(int(True)) ## 1 print(float(True)) ## 1.0 print(str(True)) ## True "],
["ifelse.html", "5 流程控制 5.1 兩個分支 5.2 三個分支", " 5 流程控制 流程控制可以幫助我們在程式中撰寫不同的劇本（scenario），根據不同的判斷條件執行不同的程式。我們使用 if、elif 與 else 建立出不同的分支，它的外觀架構長得像這樣子： if 條件一: # 程式一 elif 條件二: # 程式二 else: # 程式三 如果條件一的判斷結果為 True 就執行程式一，條件二的判斷結果為 True 就執行程式二；假如條件一與條件二的判斷結果皆為 False，就執行程式三。如果有更多的條件，只要增加 elif 的描述即可。 5.1 兩個分支 weather = &quot;晴天&quot; if weather == &quot;晴天&quot;: print(&quot;天氣是{}，去戶外跑步&quot;.format(weather)) else: print(&quot;天氣是{}，去健身房&quot;.format(weather)) ## 天氣是晴天，去戶外跑步 weather = &quot;雨天&quot; if weather == &quot;晴天&quot;: print(&quot;天氣是{}，去戶外跑步&quot;.format(weather)) else: print(&quot;天氣是{}，去健身房&quot;.format(weather)) ## 天氣是雨天，去健身房 5.2 三個分支 在三種天氣條件下，使用 if、elif 與 else 就可以建立出三個分支的運動行程： weather = &quot;晴天&quot; if weather == &quot;晴天&quot;: print(&quot;天氣是{}，去戶外跑步&quot;.format(weather)) elif weather == &quot;下雨&quot;: print(&quot;天氣是{}，去健身房&quot;.format(weather)) else: print(&quot;天氣是{}，睡回籠覺&quot;.format(weather)) ## 天氣是晴天，去戶外跑步 weather = &quot;下雨&quot; if weather == &quot;晴天&quot;: print(&quot;天氣是{}，去戶外跑步&quot;.format(weather)) elif weather == &quot;下雨&quot;: print(&quot;天氣是{}，去健身房&quot;.format(weather)) else: print(&quot;天氣是{}，睡回籠覺&quot;.format(weather)) ## 天氣是下雨，去健身房 weather = &quot;暴雨&quot; if weather == &quot;晴天&quot;: print(&quot;天氣是{}，去戶外跑步&quot;.format(weather)) elif weather == &quot;下雨&quot;: print(&quot;天氣是{}，去健身房&quot;.format(weather)) else: print(&quot;天氣是{}，睡回籠覺&quot;.format(weather)) ## 天氣是暴雨，睡回籠覺 "],
["containers-1.html", "6 資料容器一 6.1 list 6.2 tuple", " 6 資料容器一 在這個章節中我們要從元素（ingredients）邁向容器（containers），這句話是什麼意思？在某些應用情境下 Python 的資料容器可以讓我們將多個資料指派給一個物件。比如說我們想在 Python 中輸入美國影集六人行（Friends）的六個主要演員： starring_1 = &quot;Jennifer Aniston&quot; starring_2 = &quot;Courteney Cox&quot; starring_3 = &quot;Lisa Kudrow&quot; starring_4 = &quot;Matt LeBlanc&quot; starring_5 = &quot;Matthew Perry&quot; starring_6 = &quot;David Schwimmer&quot; 這是到目前為止我們儲存資料的方式，將一個文字對應給一個物件；或者我們可以利用 Python 的資料容器 list 將六組文字儲存在一個物件之中。 6.1 list starrings = [&quot;Jennifer Aniston&quot;, &quot;Courteney Cox&quot;, &quot;Lisa Kudrow&quot;, &quot;Matt LeBlanc&quot;, &quot;Matthew Perry&quot;, &quot;David Schwimmer&quot;] print(starrings) ## [&#39;Jennifer Aniston&#39;, &#39;Courteney Cox&#39;, &#39;Lisa Kudrow&#39;, &#39;Matt LeBlanc&#39;, &#39;Matthew Perry&#39;, &#39;David Schwimmer&#39;] 這是一個稱為 list 的資料容器，用中括號將資料包含起來，並且以逗號分隔。Python 中可以用來儲存資料的容器有四類： 資料容器 建立方法 特性 list 使用中括號 [] 富有彈性且能容納不同資料類型 tuple 使用小括號 () 不可以更動 dict 使用大括號 {} 並搭配鍵值與資料 使用鍵值為資料作索引 set 使用大括號 {} 儲存唯一值 list 是一種極有彈性的資料容器，它可以容納不同的資料類型。 genre = &quot;sitcom&quot; no_of_episodes = 236 still_airing = False friends = [genre, no_of_episodes, still_airing] print(friends) ## [&#39;sitcom&#39;, 236, False] print(type(friends)) ## &lt;type &#39;list&#39;&gt; 6.1.1 選出 list 中的元素 跟文字切割相似，使用中括號 [] 搭配索引值就可以選出 list 中的元素。 starrings = [&quot;Jennifer Aniston&quot;, &quot;Courteney Cox&quot;, &quot;Lisa Kudrow&quot;, &quot;Matt LeBlanc&quot;, &quot;Matthew Perry&quot;, &quot;David Schwimmer&quot;] print(starrings[0]) ## Jennifer Aniston print(starrings[-1]) ## David Schwimmer print(starrings[:3]) ## [&#39;Jennifer Aniston&#39;, &#39;Courteney Cox&#39;, &#39;Lisa Kudrow&#39;] print(starrings[3:]) ## [&#39;Matt LeBlanc&#39;, &#39;Matthew Perry&#39;, &#39;David Schwimmer&#39;] 在使用冒號（:）進行元素選擇的時候需要注意，位於冒號前索引值的元素會被包含，但位於冒號後索引值的元素則不會被包含。所以範例中 print starrings[:3] 的輸出沒有包含位於索引值 3 的 &quot;Matt LeBlanc&quot;；但是 print starrings[3:] 的輸出則有包含位於索引值 3 的 &quot;Matt LeBlanc&quot;。 我們來檢查一下放入 list 的不同資料，是否都還保有各自的類型，可以依照索引值選出後再請 type() 函數幫我們檢查。 genre = &quot;sitcom&quot; no_of_episodes = 236 still_airing = False friends = [genre, no_of_episodes, still_airing] print(type(friends[0])) ## &lt;type &#39;str&#39;&gt; print(type(friends[1])) ## &lt;type &#39;int&#39;&gt; print(type(friends[2])) ## &lt;type &#39;bool&#39;&gt; 6.2 tuple 6.2.1 建立 tuple tuple 跟 list 很像，但是我們不能新增，刪除或者更新 tuple 中存放的元素。我們可以使用 tuple() 函數將既有的 list 轉換成為 tuple，或者在建立物件的時候使用小括號 () 藉此區別建立 list 時候所使用的中括號 []。 # 使用 tuple 函數 starrings_list = [&quot;Jennifer Aniston&quot;, &quot;Courteney Cox&quot;, &quot;Lisa Kudrow&quot;, &quot;Matt LeBlanc&quot;, &quot;Matthew Perry&quot;, &quot;David Schwimmer&quot;] starrings_tuple = tuple(starrings_list) print(starrings_tuple) ## (&#39;Jennifer Aniston&#39;, &#39;Courteney Cox&#39;, &#39;Lisa Kudrow&#39;, &#39;Matt LeBlanc&#39;, &#39;Matthew Perry&#39;, &#39;David Schwimmer&#39;) print(type(starrings_tuple)) ## &lt;type &#39;tuple&#39;&gt; # 使用小括號 starrings_tuple = (&quot;Jennifer Aniston&quot;, &quot;Courteney Cox&quot;, &quot;Lisa Kudrow&quot;, &quot;Matt LeBlanc&quot;, &quot;Matthew Perry&quot;, &quot;David Schwimmer&quot;) print(starrings_tuple) ## (&#39;Jennifer Aniston&#39;, &#39;Courteney Cox&#39;, &#39;Lisa Kudrow&#39;, &#39;Matt LeBlanc&#39;, &#39;Matthew Perry&#39;, &#39;David Schwimmer&#39;) print(type(starrings_tuple)) ## &lt;type &#39;tuple&#39;&gt; 6.2.2 tuple 元素無法做更動 假如我們在建立一個 list 的時候少輸入了一個元素，我們可以用 append() 這個方法新增漏掉的元素在尾端。 # list 可以新增 starrings_list = [&quot;Jennifer Aniston&quot;, &quot;Courteney Cox&quot;, &quot;Lisa Kudrow&quot;, &quot;Matt LeBlanc&quot;, &quot;Matthew Perry&quot;] starrings_list.append(&quot;David Schwimmer&quot;) print(starrings_list) ## [&#39;Jennifer Aniston&#39;, &#39;Courteney Cox&#39;, &#39;Lisa Kudrow&#39;, &#39;Matt LeBlanc&#39;, &#39;Matthew Perry&#39;, &#39;David Schwimmer&#39;] 而 tuple 因為具有無法新增，刪除或者更新的特性，因此假如我們嘗試用 append() 這個方法新增漏掉的元素，就會得到一個錯誤訊息。 # tuple 不可以新增 starrings_tuple = (&quot;Jennifer Aniston&quot;, &quot;Courteney Cox&quot;, &quot;Lisa Kudrow&quot;, &quot;Matt LeBlanc&quot;, &quot;Matthew Perry&quot;) starrings_tuple.append(&quot;David Schwimmer&quot;) "],
["for-loop.html", "7 For 迴圈 7.1 for 迴圈結構 7.2 List Comprehension 7.3 enumerate 函數 7.4 zip 函數", " 7 For 迴圈 迴圈是撰寫程式相當重要的環節，它可以幫助我們省去撰寫重複內容的程式。假設我們現在想做一件事情：我們想讓 Python 輸出美國影集六人行（Friends）的六個主要演員： print(&quot;Jennifer Aniston&quot;) ## Jennifer Aniston print(&quot;Courteney Cox&quot;) ## Courteney Cox print(&quot;Lisa Kudrow&quot;) ## Lisa Kudrow print(&quot;Matt LeBlanc&quot;) ## Matt LeBlanc print(&quot;Matthew Perry&quot;) ## Matthew Perry print(&quot;David Schwimmer&quot;) ## David Schwimmer 或者我們可以先將這六位主要演員儲存在一個 list 中，稱為 starrings，再利用選擇 list 中元素的方式一一輸出： starrings = [&quot;Jennifer Aniston&quot;, &quot;Courteney Cox&quot;, &quot;Lisa Kudrow&quot;, &quot;Matt LeBlanc&quot;, &quot;Matthew Perry&quot;, &quot;David Schwimmer&quot;] print(starrings[0]) ## Jennifer Aniston print(starrings[1]) ## Courteney Cox print(starrings[2]) ## Lisa Kudrow print(starrings[3]) ## Matt LeBlanc print(starrings[4]) ## Matthew Perry print(starrings[5]) ## David Schwimmer 在不撰寫迴圈的情況下，我們還是能夠慢慢地複製貼上結構類似的程式，修改一些小地方，進而完成我們想要做的事情。但這確實不是一個好方法，試想如果我們要輸出的不再只有 6 個元素，而是 66、666 個這麼多元素呢？這時我們可以求助迴圈來協助！ 7.1 for 迴圈結構 一個 for 迴圈結構如下： for i in x: # 每次迭代執行的程式 Python 使用縮排（indent）來載明每次迭代要處理的事情，假如 x 是一個 list 或是 tuple，i 會由 x[0] 起始；當一次迭代結束，i 會更動為 x[1]，以此類推；而在每一次迭代中，Python 都會執行縮排部分的程式。 starrings = [&quot;Jennifer Aniston&quot;, &quot;Courteney Cox&quot;, &quot;Lisa Kudrow&quot;, &quot;Matt LeBlanc&quot;, &quot;Matthew Perry&quot;, &quot;David Schwimmer&quot;] for starring in starrings: print starring ## Jennifer Aniston ## Courteney Cox ## Lisa Kudrow ## Matt LeBlanc ## Matthew Perry ## David Schwimmer 在這個 for 迴圈中，迭代子（iterator）我們取名作 starring，它是以文字的資料類型存在；我們也可以讓迭代子以整數的資料類型存在： starrings = [&quot;Jennifer Aniston&quot;, &quot;Courteney Cox&quot;, &quot;Lisa Kudrow&quot;, &quot;Matt LeBlanc&quot;, &quot;Matthew Perry&quot;, &quot;David Schwimmer&quot;] for i in range(len(starrings)): print starrings[i] ## Jennifer Aniston ## Courteney Cox ## Lisa Kudrow ## Matt LeBlanc ## Matthew Perry ## David Schwimmer 在這個迴圈中，迭代子（iterator）我們取名作 i，它是整數由 0 起始到 5 終止，我們藉助 range() 函數產生 0 到 5。 7.1.1 不只是 print 在迴圈之中，除了單純將迭代子印出來，我們還可以做其他的事情，例如：將每個演員的 First name 改為大寫： starrings = [&quot;Jennifer Aniston&quot;, &quot;Courteney Cox&quot;, &quot;Lisa Kudrow&quot;, &quot;Matt LeBlanc&quot;, &quot;Matthew Perry&quot;, &quot;David Schwimmer&quot;] upper_firstnames = [] for starring in starrings: upper_name = starring.upper() upper_firstnames.append(upper_name) print(upper_firstnames) ## [&#39;JENNIFER ANISTON&#39;, &#39;COURTENEY COX&#39;, &#39;LISA KUDROW&#39;, &#39;MATT LEBLANC&#39;, &#39;MATTHEW PERRY&#39;, &#39;DAVID SCHWIMMER&#39;] 7.2 List Comprehension 將事情變得更簡單一些： starrings = [&quot;Jennifer Aniston&quot;, &quot;Courteney Cox&quot;, &quot;Lisa Kudrow&quot;, &quot;Matt LeBlanc&quot;, &quot;Matthew Perry&quot;, &quot;David Schwimmer&quot;] upper_firstnames = [x.upper() for x in starring] print(upper_firstnames) ## [&#39;D&#39;, &#39;A&#39;, &#39;V&#39;, &#39;I&#39;, &#39;D&#39;, &#39; &#39;, &#39;S&#39;, &#39;C&#39;, &#39;H&#39;, &#39;W&#39;, &#39;I&#39;, &#39;M&#39;, &#39;M&#39;, &#39;E&#39;, &#39;R&#39;] 7.3 enumerate 函數 enumerate 函數能夠同時取用索引與元素。 starrings = [&quot;Jennifer Aniston&quot;, &quot;Courteney Cox&quot;, &quot;Lisa Kudrow&quot;, &quot;Matt LeBlanc&quot;, &quot;Matthew Perry&quot;, &quot;David Schwimmer&quot;] for i, starring in enumerate(starrings): print(&quot;{}: {}&quot;.format(i, starring)) ## 0: Jennifer Aniston ## 1: Courteney Cox ## 2: Lisa Kudrow ## 3: Matt LeBlanc ## 4: Matthew Perry ## 5: David Schwimmer 7.4 zip 函數 zip 函數能夠讓兩個迴圈平行運作。 starrings = [&quot;Jennifer Aniston&quot;, &quot;Courteney Cox&quot;, &quot;Lisa Kudrow&quot;, &quot;Matt LeBlanc&quot;, &quot;Matthew Perry&quot;, &quot;David Schwimmer&quot;] characters = [&quot;Racheal Green&quot;, &quot;Monica Geller&quot;, &quot;Phoebe Buffay&quot;, &quot;Joey Tribbiani&quot;, &quot;Chandler Bing&quot;, &quot;Ross Geller&quot;] for char, starring in zip(characters, starrings): print(&quot;{}: {}&quot;.format(char, starring)) ## Racheal Green: Jennifer Aniston ## Monica Geller: Courteney Cox ## Phoebe Buffay: Lisa Kudrow ## Joey Tribbiani: Matt LeBlanc ## Chandler Bing: Matthew Perry ## Ross Geller: David Schwimmer "],
["containers-2.html", "8 資料容器二 8.1 set 8.2 dict", " 8 資料容器二 8.1 set set 是一個存放唯一值（unique values）的資料容器，當我們希望可以移除重複的資料時，set 就可以派上用場。 8.1.1 建立 set 我們可以使用 set() 函數將既有的 list 轉換成為 set，或者在建立物件的時候使用大括號 {} 藉此區別建立 list 時候所使用的中括號 []。 # 使用 set 函數 gender_list = [&quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;] gender_set = set(gender_list) print(gender_set) ## set([&#39;male&#39;, &#39;female&#39;]) print(type(gender_set)) ## &lt;type &#39;set&#39;&gt; # 使用大括號建立 gender_set = {&quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;} print(gender_set) ## set([&#39;male&#39;, &#39;female&#39;]) print(type(gender_set)) ## &lt;type &#39;set&#39;&gt; 8.1.2 set 無法選出裡面的元素 set 與 list 和 tuple 最大的不同點在於它沒有辦法利用中括號與索引值選取元素。 gender_set = {&quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;} print(gender_set[0]) 8.2 dict dict 是帶有鍵值（key）的 list。 8.2.1 建立 dict 在建立的 dict 時候我們需要使用大括號 {} 並且指派每一個資料的鍵值。 friends_dict = { &quot;genre&quot;: &quot;sitcom&quot;, &quot;seasons&quot;: 10, &quot;episodes&quot;: 236, &quot;starrings&quot;: [&quot;Jennifer Aniston&quot;, &quot;Courteney Cox&quot;, &quot;Lisa Kudrow&quot;, &quot;Matt LeBlanc&quot;, &quot;Matthew Perry&quot;, &quot;David Schwimmer&quot;] } print(type(friends_dict)) 8.2.2 利用鍵值選出 dict 中的元素 我們在中括號 [] 中使用鍵值來選擇元素。 friends_dict = { &quot;genre&quot;: &quot;sitcom&quot;, &quot;seasons&quot;: 10, &quot;episodes&quot;: 236, &quot;starrings&quot;: [&quot;Jennifer Aniston&quot;, &quot;Courteney Cox&quot;, &quot;Lisa Kudrow&quot;, &quot;Matt LeBlanc&quot;, &quot;Matthew Perry&quot;, &quot;David Schwimmer&quot;] } print(friends_dict[&quot;genre&quot;]) print(friends_dict[&quot;seasons&quot;]) print(friends_dict[&quot;episodes&quot;]) print(friends_dict[&quot;starrings&quot;]) 8.2.3 dict 與 for 迴圈 dict 的結構比 list 多了鍵值（key），如果沒有特別指定，迴圈輸出的會是 dict 的鍵值。 starrings = { &quot;Rachel Green&quot;: &quot;Jennifer Aniston&quot;, &quot;Monica Geller&quot;: &quot;Courteney Cox&quot;, &quot;Phoebe Buffay&quot;: &quot;Lisa Kudrow&quot;, &quot;Joey Tribbiani&quot;: &quot;Matt LeBlanc&quot;, &quot;Chandler Bing&quot;: &quot;Matthew Perry&quot;, &quot;Ross Geller&quot;: &quot;David Schwimmer&quot; } for starring in starrings: print starring ## Phoebe Buffay ## Joey Tribbiani ## Ross Geller ## Rachel Green ## Monica Geller ## Chandler Bing 比較清楚的寫法是在 dict 後面加入 .keys() 或 .values() 表示針對鍵值或內容進行迴圈的輸出。 starrings = { &quot;Rachel Green&quot;: &quot;Jennifer Aniston&quot;, &quot;Monica Geller&quot;: &quot;Courteney Cox&quot;, &quot;Phoebe Buffay&quot;: &quot;Lisa Kudrow&quot;, &quot;Joey Tribbiani&quot;: &quot;Matt LeBlanc&quot;, &quot;Chandler Bing&quot;: &quot;Matthew Perry&quot;, &quot;Ross Geller&quot;: &quot;David Schwimmer&quot; } for starring in starrings.keys(): print starring ## Phoebe Buffay ## Joey Tribbiani ## Ross Geller ## Rachel Green ## Monica Geller ## Chandler Bing print(&quot;---&quot;) ## --- for starring in starrings.values(): print starring ## Lisa Kudrow ## Matt LeBlanc ## David Schwimmer ## Jennifer Aniston ## Courteney Cox ## Matthew Perry 如果希望同時將 dict 的鍵值與內容一起輸出，我們可以藉助 .items()。 starrings = { &quot;Rachel Green&quot;: &quot;Jennifer Aniston&quot;, &quot;Monica Geller&quot;: &quot;Courteney Cox&quot;, &quot;Phoebe Buffay&quot;: &quot;Lisa Kudrow&quot;, &quot;Joey Tribbiani&quot;: &quot;Matt LeBlanc&quot;, &quot;Chandler Bing&quot;: &quot;Matthew Perry&quot;, &quot;Ross Geller&quot;: &quot;David Schwimmer&quot; } for (key, value) in starrings.items(): print(&quot;{} 由 {} 演出&quot;.format(key, value)) "],
["while-loop.html", "9 while 迴圈 9.1 while 迴圈結構", " 9 while 迴圈 9.1 while 迴圈結構 一個 while 迴圈結構如下： while 某些條件: # 每次迭代執行的程式 在每一次的迭代之前，Python 都會檢查某些條件是否成立，假如判斷結果為布林 True 就會執行每次迭代執行的程式；一但條件不成立，意即判斷結果為布林 False 迴圈就會終止。 我們試著寫輸出美國影集六人行（Friends）六個主要演員的 while 迴圈： starrings = [&quot;Jennifer Aniston&quot;, &quot;Courteney Cox&quot;, &quot;Lisa Kudrow&quot;, &quot;Matt LeBlanc&quot;, &quot;Matthew Perry&quot;, &quot;David Schwimmer&quot;] i = 0 while i &lt; 6: print starrings[i] i += 1 ## Jennifer Aniston ## Courteney Cox ## Lisa Kudrow ## Matt LeBlanc ## Matthew Perry ## David Schwimmer 很重要的是 i += 1，假如忘記寫這一行程式，我們的 while 迴圈會無限次數地一直輸出 “Jennifer Aniston”，原因是我們的判斷條件永遠成立（0 小於 6），所以會不斷地執行 print starrings[0]。 9.1.1 兩種迴圈的運用時機 我們何時應該運用 for 迴圈、何時應該運用 while 迴圈呢？一個簡單的判斷是：假如我們明確知道程式的迭代次數，可以視個人偏好採用 for 迴圈或 while 迴圈；在不知道迭代次數的情形下，我們只能採用 while 迴圈。 這個說法還是略嫌抽象，舉一個例子說明會比較好理解。假如我們現在投擲一枚公正的銅板，想知道總共需要投擲幾次才會出現三個正面，這就是一個不知道迭代次數的問題。運氣好一點也許投擲三次，三次都是正面；運氣差一點的也許要投擲十幾次才湊得齊三次正面。讓我們寫一段簡單的程式來模擬這個例子： from random import choice coin_flips = [] # 建立一個空的清單放置每一次投擲的結果 coin = [&quot;Head&quot;, &quot;Tail&quot;] while coin_flips.count(&quot;Head&quot;) &lt; 3: coin_flips.append(choice(coin)) print coin_flips # 印出每次投擲的紀錄 print len(coin_flips) # 總共投擲了幾次 您可以試著自行執行幾次，看看每一輪投擲次數的差異。 "],
["functions.html", "10 自訂函數 10.1 查詢函數的用法 10.2 自訂函數 10.3 變數範圍 10.4 匿名函數（lambda 函數） 10.5 錯誤處理", " 10 自訂函數 其實我們已經開始使用函數了，例如我們請 Python 回傳資料類型的 type() 或者產生數列 list 的 range() 都是函數。函數的使用方法是在小括號中放輸入（input），然後呼叫函數得到輸出（output）。 10.1 查詢函數的用法 如果我們不知道某個函數的用法，可以使用 help() 查詢，了解一個函數的輸入與它可以設定的參數，例如查詢 range() 函數就知道可以指定產出數列的起始值（start 預設為 0）、終止值（stop）與公差（step 預設為 1）： help(range) 10.2 自訂函數 Python 自訂函數的架構： def function_name(輸入1, 輸入2, 參數 1, 參數 2, ...): &quot;&quot;&quot; Docstrings &quot;&quot;&quot; # 主要的程式 return 結果 首先給函數取個名字（function_name），接著在小括號中放進輸入（inputs）與參數（parameters），然後附上一段說明（Docstrings），在縮排內撰寫我們主要的程式，最後把輸出結果放在 return 後面。 10.2.1 函數說明文件 Docstrings 養成在自訂函數中加入 Docstrings 說明的好習慣，這有助於分享我們的自訂函數給其他人使用。Docstrings 可以區分為單行與多行： def function_name(輸入, 參數 1, 參數 2, ...): &quot;&quot;&quot;單行的 Docstring&quot;&quot;&quot; # 主要的程式 return 結果 def function_name(輸入, 參數 1, 參數 2, ...): &quot;&quot;&quot; 多行的 Docstrings 更多的說明內容 &quot;&quot;&quot; # 主要的程式 return 結果 我們撰寫的 Docstrings 會在使用 help() 查詢函數用法的時候出現，例如我們的第一個自訂函數，它的作用是將輸入的數字平方之後回傳，我們就叫它 my_squared() 函數。 def my_squared(x): &quot;&quot;&quot; 將輸入的數字平方之後回傳 &quot;&quot;&quot; return x**2 help(my_squared) # 查詢 my_squared() 函數 ## Help on function my_squared in module __main__: ## ## my_squared(x) ## 將輸入的數字平方之後回傳 10.2.2 計算圓面積的函數 熟能生巧，我們來練習自訂一個輸入半徑長度可以計算出圓面積的函數叫做 circle_area()！ def circle_area(r): &quot;&quot;&quot; 輸入半徑長度可以計算出圓面積 &quot;&quot;&quot; pi = 3.14 return pi * r**2 print(circle_area(3)) ## 28.26 10.2.3 計算圓周長的函數 我們接著來練習自訂一個輸入半徑長度可以計算出圓周長的函數叫做 circle_circum()！ def circle_circum(r): &quot;&quot;&quot; 輸入半徑長度可以計算出圓周長 &quot;&quot;&quot; pi = 3.14 return 2 * pi * r print(circle_circum(3)) ## 18.84 10.2.4 加入參數 我們把前面兩個自訂函數的功能整合起來到一個函數裡面，這個時候我們會正式納入參數（parameters）的觀念到這個自訂函數中，使用一個布林參數 is_area 來讓使用者在呼叫函數時決定要計算圓面積或者圓周長。 def circle_calculator(r, is_area=True): &quot;&quot;&quot; 輸入半徑長度可以計算出圓面積與圓周長 利用參數 is_area 決定要回傳圓面積或圓周長 預設回傳圓面積 &quot;&quot;&quot; pi = 3.14 if is_area == True: return pi * r**2 else: return 2 * pi * r print(circle_calculator(3)) ## 28.26 print(circle_calculator(3, is_area=False)) ## 18.84 這裡我們設計 is_area 參數是有一個預設值 True，假如自訂函數時沒有指定 is_area 參數的預設值並且呼叫函數時也沒有指定，就會出現錯誤訊息： def circle_calculator(r, is_area): # 沒有指定預設值 &quot;&quot;&quot; 輸入半徑長度可以計算出圓面積與圓周長 利用參數 is_area 決定要回傳圓面積或圓周長 預設回傳圓面積 &quot;&quot;&quot; pi = 3.14 if is_area == True: return pi * r**2 else: return 2 * pi * r print(circle_calculator(3)) # 沒有指定 is_area 參數的值 10.2.5 有多個輸出的函數 我們再修正一下 circle_calculator() 這個自訂函數，讓它可以輸入半徑就一併輸出圓面積與圓周長。這時我們只要在 return 敘述後面將兩個輸出用逗號 , 隔開就會儲存在一個 tuple 中回傳。 def circle_calculator(r): &quot;&quot;&quot; 輸入半徑長度可以計算出圓面積與圓周長 將圓面積與圓周長一起回傳 &quot;&quot;&quot; pi = 3.14 area = pi * r**2 circum = 2 * pi * r return area, circum print(circle_calculator(3)) ## (28.26, 18.84) 10.3 變數範圍 在自訂函數時必須意識到變數範圍這個議題，程式中的變數開始被我們區分為區域變數（local variables）與全域變數（global variables），在函數內我們能夠使用兩種類型的變數，但是在函數外，僅能使用全域變數。用講的很抽象，我們還是動手定義自訂函數來釐清這個概念，用一個自訂函數 my_squared() 來演釋： def my_squared(x): ans = x ** 2 # ans 是一個區域變數 return ans print(ans) # 在函數外沒有 ans 假如我們將 ans 在函數外也進行指派： ans = 0 # ans 是一個全域變數 def my_squared(x): ans = x ** 2 # ans 是一個區域變數 return ans print(my_squared(3)) # 區域變數 ans 的值是 9 ## 9 print(ans) # 全域變數 ans 的值是 0 ## 0 10.4 匿名函數（lambda 函數） 除了正常的函數自訂結構，我們也可以使用一個稱作 lambda 函數的寫法，這樣的寫法不需要 return 敘述，我們來試著將 my_squared() 函數改寫成 lambda 函數： my_squared = lambda x : x ** 2 print(my_squared(3)) lambda 函數常與 map()、filter() 一起使用，像是利用 filter() 搭配 lambda 函數將 1 到 10 的偶數挑出來： filter(lambda x : x % 2 == 0, range(1, 11)) 或者是利用 map() 搭配 lambda 函數將 1 到 10 的每一個數字都平方： map(lambda x : x**2, range(1, 11)) 10.5 錯誤處理 自訂函數時如果能夠掌握某些特定錯誤，撰寫客製的錯誤訊息，可以讓使用自訂函數的使用者更快完成偵錯，我們可以使用 try - except 的語法結構進行錯誤處理。 我們修改原本計算平方數的 my_squared() 當使用者輸入文字時會回傳客製錯誤訊息：「請輸入數值。」 def my_squared(x): &quot;&quot;&quot; 計算平方數且具有錯誤處理的函數 &quot;&quot;&quot; try: return x ** 2 except: return &quot;請輸入數值。&quot; print(my_squared(&quot;3&quot;)) ## 請輸入數值。 除了我們在這個例子中遭遇的 TypeError 以外，也可以針對不同的錯誤類型設計客製錯誤訊息，接著我們再寫一個除法的函數 divide() 來示範，如果使用者輸入的資料類型錯誤（TypeError）就回傳「請輸入數值。」假如使用者在除數指定了 0（ZeroDivisionError）就回傳「除數不可以為零。」 def divide(x, y): try: return x / y except TypeError: return &quot;請輸入數值。&quot; except ZeroDivisionError: return &quot;除數不可以為零。&quot; except: return &quot;其他的錯誤。&quot; print(divide(&quot;9&quot;, 3)) ## 請輸入數值。 print(divide(9, 0)) ## 除數不可以為零。 "]
]
